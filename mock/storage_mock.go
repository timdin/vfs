// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/timdin/vfs/storage (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	constants "github.com/timdin/vfs/constants"
	model "github.com/timdin/vfs/model"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockStorage) CreateFile(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockStorageMockRecorder) CreateFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockStorage)(nil).CreateFile), arg0, arg1, arg2, arg3)
}

// CreateFolder mocks base method.
func (m *MockStorage) CreateFolder(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockStorageMockRecorder) CreateFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockStorage)(nil).CreateFolder), arg0, arg1, arg2)
}

// DeleteFile mocks base method.
func (m *MockStorage) DeleteFile(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockStorageMockRecorder) DeleteFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockStorage)(nil).DeleteFile), arg0, arg1, arg2)
}

// DeleteFolder mocks base method.
func (m *MockStorage) DeleteFolder(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockStorageMockRecorder) DeleteFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockStorage)(nil).DeleteFolder), arg0, arg1)
}

// ListFile mocks base method.
func (m *MockStorage) ListFile(arg0, arg1 string, arg2 constants.SortByField, arg3 constants.Order) ([]*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFile indicates an expected call of ListFile.
func (mr *MockStorageMockRecorder) ListFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFile", reflect.TypeOf((*MockStorage)(nil).ListFile), arg0, arg1, arg2, arg3)
}

// ListFolder mocks base method.
func (m *MockStorage) ListFolder(arg0 string, arg1 constants.SortByField, arg2 constants.Order) ([]*model.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolder indicates an expected call of ListFolder.
func (mr *MockStorageMockRecorder) ListFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolder", reflect.TypeOf((*MockStorage)(nil).ListFolder), arg0, arg1, arg2)
}

// Register mocks base method.
func (m *MockStorage) Register(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockStorageMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStorage)(nil).Register), arg0)
}

// RenameFile mocks base method.
func (m *MockStorage) RenameFile(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFile indicates an expected call of RenameFile.
func (mr *MockStorageMockRecorder) RenameFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFile", reflect.TypeOf((*MockStorage)(nil).RenameFile), arg0, arg1, arg2, arg3)
}

// RenameFolder mocks base method.
func (m *MockStorage) RenameFolder(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFolder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFolder indicates an expected call of RenameFolder.
func (mr *MockStorageMockRecorder) RenameFolder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockStorage)(nil).RenameFolder), arg0, arg1, arg2)
}
